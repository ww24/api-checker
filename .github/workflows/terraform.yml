name: terraform

on:
  push:
    branches:
      - master
    paths:
      - "terraform/**"
  pull_request:
    branches:
      - master
    paths:
      - "terraform/**"
  workflow_call:
    inputs:
      version:
        type: string
        required: true

env:
  TERRAFORM_VERSION: "~> 1.1.7"

defaults:
  run:
    working-directory: terraform

jobs:
  plan:
    name: plan
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      pull-requests: "write"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3
      - uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions"
          service_account: "terraform@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "$TERRAFORM_VERSION"
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      - name: Terraform init
        id: init
        run: terraform init
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
      - name: Generate tfvars
        run: |
          echo "project=\"${{ secrets.GCP_PROJECT_ID }}\"" >> terraform.auto.tfvars
          if [ -n "${{ inputs.version }}" ]; then
            echo "version=\"${{ inputs.version }}\"" >> terraform.auto.tfvars
          fi
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -input=false
      - name: Output plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `- [${"${{ steps.fmt.outcome }}"=="success"?"x":" "}] Terraform Format and Style 🖌
            - [${"${{ steps.init.outcome }}"=="success"?"x":" "}] Terraform Initialization ⚙️
            - [${"${{ steps.validate.outcome }}"=="success"?"x":" "}] Terraform Validation 🤖
            - [${"${{ steps.plan.outcome }}"=="success"?"x":" "}] Terraform Plan 📖

            *Pusher: @${{ github.actor }}*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  apply:
    name: apply
    environment: production
    if: github.event_name == 'push'
    needs: [plan]
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v3
      - uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions"
          service_account: "terraform@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "$TERRAFORM_VERSION"
      - name: Terraform init
        id: init
        run: terraform init
      - name: Generate tfvars
        run: |
          echo "project=\"${{ secrets.GCP_PROJECT_ID }}\"" >> terraform.auto.tfvars
          if [ -n "${{ inputs.version }}" ]; then
            echo "version=\"${{ inputs.version }}\"" >> terraform.auto.tfvars
          fi
      - name: Terraform apply
        run: terraform apply -auto-approve -no-color -input=false
